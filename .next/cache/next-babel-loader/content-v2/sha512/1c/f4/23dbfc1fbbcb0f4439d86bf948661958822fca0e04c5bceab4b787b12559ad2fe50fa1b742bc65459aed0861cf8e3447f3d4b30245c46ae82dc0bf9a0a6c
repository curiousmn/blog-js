{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport remark from 'remark';\nimport html from 'remark-html';\nimport matter from 'gray-matter';\nimport path from 'path';\nconst postDirectory = path.join(process.cwd(), 'posts');\nexport default async function getSortedPostData() {\n  const fileNames = fs.readdirSync(postDirectory);\n  const allPostData = await Promise.all(fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(postDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf-8');\n    const matterResult = matter(fileContents);\n    let content = matterResult.content;\n    let dot = 0;\n\n    for (let i = 0; i < content.length; i++) {\n      if (content[i] === \".\") {\n        dot++;\n      }\n\n      if (dot == 5) {\n        content = content.slice(0, i + 1);\n        break;\n      }\n    }\n\n    return _objectSpread({\n      id,\n      content\n    }, matterResult.data);\n  }));\n  return allPostData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  console.log(matterResult);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  console.log(processedContent);\n  const contentHTML = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHTML\n  }, matterResult.data);\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/home/utku/Files/fun/blog-js/api/index.js"],"names":["fs","remark","html","matter","path","postDirectory","join","process","cwd","getSortedPostData","fileNames","readdirSync","allPostData","Promise","all","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","content","dot","i","length","slice","data","sort","a","b","date","getPostData","console","log","processedContent","use","contentHTML","toString","getAllPostIds","params"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport remark from 'remark'\nimport html from 'remark-html'\nimport matter from 'gray-matter'\nimport path from 'path'\n\nconst postDirectory = path.join(process.cwd(), 'posts')\n\nexport default async function getSortedPostData(){\n    const fileNames = fs.readdirSync(postDirectory)\n    const allPostData = await Promise.all(fileNames.map(fileName => {\n        const id = fileName.replace(/\\.md$/,'')\n        const fullPath = path.join(postDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, 'utf-8')\n    \n        const matterResult = matter(fileContents)\n        let content = matterResult.content\n        let dot = 0\n        for(let i=0; i<content.length; i++){\n            if(content[i] === \".\"){\n                dot++\n            }\n            if(dot == 5){\n                content = content.slice(0,i+1)\n                break;\n            }\n        }\n        return{\n            id,\n            content,\n            ...matterResult.data\n        }\n    }))\n\n    return allPostData.sort((a,b) => {\n        if(a.date < b.date){\n            return 1\n        } else{\n            return -1\n        }\n    })\n}\n\nexport async function getPostData(id){\n    const fullPath = path.join(postDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n\n    const matterResult = matter(fileContents)\n    console.log(matterResult)\n    const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content)\n    console.log(processedContent)\n    const contentHTML = processedContent.toString() \n\n    return {\n        id,\n        contentHTML,\n        ...matterResult.data\n    }\n}\n\nexport function getAllPostIds(){\n    const fileNames = fs.readdirSync(postDirectory)\n\n    return fileNames.map(fileName => {\n        return{\n        params: {\n            id: fileName.replace(/\\.md$/, '')\n        }\n    }})\n}\n\n"]},"metadata":{},"sourceType":"module"}